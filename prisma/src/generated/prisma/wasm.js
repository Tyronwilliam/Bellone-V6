
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  name: 'name',
  role: 'role',
  avatar: 'avatar',
  image: 'image',
  emailVerified: 'emailVerified',
  created_at: 'created_at',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  type: 'type',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  companyName: 'companyName',
  siret: 'siret',
  vatNumber: 'vatNumber',
  website: 'website',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  country: 'country',
  currency: 'currency',
  taxRate: 'taxRate',
  userId: 'userId',
  notes: 'notes',
  isActive: 'isActive',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  client_id: 'client_id',
  created_at: 'created_at',
  updatedAt: 'updatedAt',
  hiddenForClient: 'hiddenForClient'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BoardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  projectId: 'projectId',
  created_by_id: 'created_by_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ColumnScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  position: 'position',
  color: 'color',
  boardId: 'boardId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  dueDate: 'dueDate',
  order: 'order',
  columnId: 'columnId',
  assigneeId: 'assigneeId',
  client_id: 'client_id',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  description: 'description',
  createdById: 'createdById',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectLabelScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  labelId: 'labelId',
  addedById: 'addedById',
  isFavorite: 'isFavorite',
  createdAt: 'createdAt'
};

exports.Prisma.BoardLabelScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  labelId: 'labelId',
  addedById: 'addedById',
  isFavorite: 'isFavorite',
  createdAt: 'createdAt'
};

exports.Prisma.TaskLabelScalarFieldEnum = {
  task_id: 'task_id',
  label_id: 'label_id',
  createdAt: 'createdAt'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  number: 'number',
  title: 'title',
  description: 'description',
  clientId: 'clientId',
  projectId: 'projectId',
  status: 'status',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  currency: 'currency',
  validUntil: 'validUntil',
  sentAt: 'sentAt',
  acceptedAt: 'acceptedAt',
  rejectedAt: 'rejectedAt',
  notes: 'notes',
  terms: 'terms',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuoteItemScalarFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  number: 'number',
  title: 'title',
  description: 'description',
  clientId: 'clientId',
  projectId: 'projectId',
  quoteId: 'quoteId',
  status: 'status',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  currency: 'currency',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  notes: 'notes',
  terms: 'terms',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  reference: 'reference',
  paidAt: 'paidAt',
  notes: 'notes',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  name: 'name',
  role: 'role',
  avatar: 'avatar',
  image: 'image'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ClientOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  companyName: 'companyName',
  siret: 'siret',
  vatNumber: 'vatNumber',
  website: 'website',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  country: 'country',
  currency: 'currency',
  userId: 'userId',
  notes: 'notes',
  createdById: 'createdById'
};

exports.Prisma.ProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  client_id: 'client_id'
};

exports.Prisma.ProjectMemberOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.BoardOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  projectId: 'projectId',
  created_by_id: 'created_by_id'
};

exports.Prisma.ColumnOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  boardId: 'boardId'
};

exports.Prisma.TaskOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  columnId: 'columnId',
  assigneeId: 'assigneeId',
  client_id: 'client_id',
  createdById: 'createdById'
};

exports.Prisma.LabelOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  description: 'description',
  createdById: 'createdById'
};

exports.Prisma.ProjectLabelOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  labelId: 'labelId',
  addedById: 'addedById'
};

exports.Prisma.BoardLabelOrderByRelevanceFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  labelId: 'labelId',
  addedById: 'addedById'
};

exports.Prisma.TaskLabelOrderByRelevanceFieldEnum = {
  task_id: 'task_id',
  label_id: 'label_id'
};

exports.Prisma.QuoteOrderByRelevanceFieldEnum = {
  id: 'id',
  number: 'number',
  title: 'title',
  description: 'description',
  clientId: 'clientId',
  projectId: 'projectId',
  currency: 'currency',
  notes: 'notes',
  terms: 'terms',
  createdById: 'createdById'
};

exports.Prisma.QuoteItemOrderByRelevanceFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  description: 'description'
};

exports.Prisma.InvoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  number: 'number',
  title: 'title',
  description: 'description',
  clientId: 'clientId',
  projectId: 'projectId',
  quoteId: 'quoteId',
  currency: 'currency',
  notes: 'notes',
  terms: 'terms',
  createdById: 'createdById'
};

exports.Prisma.InvoiceItemOrderByRelevanceFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  currency: 'currency',
  reference: 'reference',
  notes: 'notes',
  createdById: 'createdById'
};
exports.ClientType = exports.$Enums.ClientType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY'
};

exports.QuoteStatus = exports.$Enums.QuoteStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  CASH: 'CASH',
  CARD: 'CARD',
  PAYPAL: 'PAYPAL',
  STRIPE: 'STRIPE',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Account: 'Account',
  Client: 'Client',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  Board: 'Board',
  Column: 'Column',
  Task: 'Task',
  Label: 'Label',
  ProjectLabel: 'ProjectLabel',
  BoardLabel: 'BoardLabel',
  TaskLabel: 'TaskLabel',
  Quote: 'Quote',
  QuoteItem: 'QuoteItem',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
